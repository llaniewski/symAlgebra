// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __symAlgebra_RcppExports_h__
#define __symAlgebra_RcppExports_h__

#include <Rcpp.h>

namespace symAlgebra {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("symAlgebra", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("symAlgebra", "symAlgebra_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in symAlgebra");
            }
        }
    }

    inline sSymbol sS(Rcpp::String v) {
        typedef SEXP(*Ptr_sS)(SEXP);
        static Ptr_sS p_sS = NULL;
        if (p_sS == NULL) {
            validateSignature("sSymbol(*sS)(Rcpp::String)");
            p_sS = (Ptr_sS)R_GetCCallable("symAlgebra", "symAlgebra_sS");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sS(Rcpp::wrap(v));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sN(double v) {
        typedef SEXP(*Ptr_sN)(SEXP);
        static Ptr_sN p_sN = NULL;
        if (p_sN == NULL) {
            validateSignature("sSymbol(*sN)(double)");
            p_sN = (Ptr_sN)R_GetCCallable("symAlgebra", "symAlgebra_sN");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sN(Rcpp::wrap(v));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sSymboloperator_plus(const sSymbol& x, const sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_plus)(SEXP,SEXP);
        static Ptr_sSymboloperator_plus p_sSymboloperator_plus = NULL;
        if (p_sSymboloperator_plus == NULL) {
            validateSignature("sSymbol(*sSymboloperator_plus)(const sSymbol&,const sSymbol&)");
            p_sSymboloperator_plus = (Ptr_sSymboloperator_plus)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_plus");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_plus(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sSymboloperator_minus(const sSymbol& x, const sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_minus)(SEXP,SEXP);
        static Ptr_sSymboloperator_minus p_sSymboloperator_minus = NULL;
        if (p_sSymboloperator_minus == NULL) {
            validateSignature("sSymbol(*sSymboloperator_minus)(const sSymbol&,const sSymbol&)");
            p_sSymboloperator_minus = (Ptr_sSymboloperator_minus)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_minus");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_minus(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sSymboloperator_times(const sSymbol& x, const sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_times)(SEXP,SEXP);
        static Ptr_sSymboloperator_times p_sSymboloperator_times = NULL;
        if (p_sSymboloperator_times == NULL) {
            validateSignature("sSymbol(*sSymboloperator_times)(const sSymbol&,const sSymbol&)");
            p_sSymboloperator_times = (Ptr_sSymboloperator_times)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_times");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_times(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sSymboloperator_divide(const sSymbol& x, const sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_divide)(SEXP,SEXP);
        static Ptr_sSymboloperator_divide p_sSymboloperator_divide = NULL;
        if (p_sSymboloperator_divide == NULL) {
            validateSignature("sSymbol(*sSymboloperator_divide)(const sSymbol&,const sSymbol&)");
            p_sSymboloperator_divide = (Ptr_sSymboloperator_divide)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_divide");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_divide(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline sSymbol sSymboloperator_power(const sSymbol& x, const sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_power)(SEXP,SEXP);
        static Ptr_sSymboloperator_power p_sSymboloperator_power = NULL;
        if (p_sSymboloperator_power == NULL) {
            validateSignature("sSymbol(*sSymboloperator_power)(const sSymbol&,const sSymbol&)");
            p_sSymboloperator_power = (Ptr_sSymboloperator_power)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_power");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_power(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<sSymbol >(__result);
    }

    inline bool sSymboloperator_equal(sSymbol& x, sSymbol& y) {
        typedef SEXP(*Ptr_sSymboloperator_equal)(SEXP,SEXP);
        static Ptr_sSymboloperator_equal p_sSymboloperator_equal = NULL;
        if (p_sSymboloperator_equal == NULL) {
            validateSignature("bool(*sSymboloperator_equal)(sSymbol&,sSymbol&)");
            p_sSymboloperator_equal = (Ptr_sSymboloperator_equal)R_GetCCallable("symAlgebra", "symAlgebra_sSymboloperator_equal");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_sSymboloperator_equal(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<bool >(__result);
    }

}

#endif // __symAlgebra_RcppExports_h__
